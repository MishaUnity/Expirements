using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Graphics;
using Content.Client.Resources;
using Robust.Shared.Prototypes;
using Robust.Client.ResourceManagement;
using Robust.Client.GameObjects;
using Robust.Shared.Utility;
using Linguini.Bundle.Errors;
using Robust.Shared.Timing;
using System.Data;
using System.Numerics;
using Content.Shared.RemoteVehicle.Components;
using Content.Shared.RemoteVehicle.Systems;
using Robust.Shared.Graphics;

namespace Content.Client.RemoteVehicle.Ui;

[GenerateTypedNameReferences]
public sealed partial class RemoteControllerMenu : DefaultWindow
{
    [Dependency] private readonly IEntityManager _entityManager = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly IResourceCache _resourceCache = default!;

    private SpriteSystem? _spriteSystem;

    private readonly FixedEye _defaultEye = new();
    private ShaderInstance _staticEffect;

    public readonly EntityUid Entity;
    private RemoteVehicleComponent? _connectedVehicle;
    private RemoteVehicleModuleComponent[]? _vehicleModules;

    public event Action? OnStartButtonPressed;
    public event Action<EntityUid>? OnModuleUseButtonPressed;

    public RemoteControllerMenu(string name, EntityUid entity)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        Entity = entity;
        if (Window != null)
            Window.Title = name;

        _staticEffect = _prototypeManager.Index<ShaderPrototype>("StaticEffect").Instance().Duplicate();

        var texture = _resourceCache.GetTexture("/Textures/Interface/Nano/square_black.png");
        var shader = _prototypeManager.Index<ShaderPrototype>("StaticEffect").Instance().Duplicate();
        shader.SetParameter("noiseIntensity", 1f);
        shader.SetParameter("monoIntensity", 1f);

        CameraViewBackground.Stretch = TextureRect.StretchMode.Scale;
        CameraViewBackground.Texture = texture;
        CameraViewBackground.ShaderOverride = shader;

        CameraView.ViewportSize = new Vector2i(500, 500);
        CameraView.Eye = _defaultEye;

        StartButton.OnPressed += _ => OnStartButtonPressed?.Invoke();
    }

    public void UpdateUiState(IEye? eye, SpriteSystem spriteSystem, RemoteVehicleComponent? vehicle, RemoteVehicleModuleComponent[]? modules)
    {
        _connectedVehicle = vehicle;
        _vehicleModules = modules;

        _spriteSystem = spriteSystem;

        CameraView.Eye = eye != null ? eye : _defaultEye;
        CameraView.Visible = eye != null;
        CameraViewBackground.Visible = eye == null;

        StartButton.Disabled = _connectedVehicle == null;
        if (_connectedVehicle == null || !_connectedVehicle.Enabled)
            StartButton.Text = Loc.GetString("remote-control-ui-vehicle-disabled");
        else
            StartButton.Text = Loc.GetString("remote-control-ui-vehicle-enabled");

        VehicleId.Text = _connectedVehicle != null ? Loc.GetString("remote-control-ui-id-prefix") + " ID" + _connectedVehicle.Owner.ToString() : Loc.GetString("remote-control-ui-no-id");

        if (vehicle == null)
            UpdateEmptyUi();

        UpdateVehicleUi();
        UpdateModuleCards();
    }

    private void UpdateVehicleUi()
    {
        if (_spriteSystem == null || _connectedVehicle == null)
            return;

        SignalIconStates signalState = (SignalIconStates) Math.Clamp(Math.Floor(EaseIn(_connectedVehicle.SignalLevel, 1) * 4f), 0, 4);
        float noiseIntensity = Math.Clamp(EaseIn(_connectedVehicle.SignalLevel, 4), 0f, 1f);
        float monoIntensity = Math.Clamp(EaseIn(_connectedVehicle.SignalLevel, 3), 0f, 1f);

        _staticEffect.SetParameter("noiseIntensity", noiseIntensity);
        _staticEffect.SetParameter("monoIntensity", monoIntensity);
        CameraView.ShaderOverride = _staticEffect;

        var signalIcon = _spriteSystem.GetState(new SpriteSpecifier.Rsi(new ResPath("/Textures/Interface/Misc/signal_icons.rsi"), signalState.ToString()));
        SignalIcon.Texture = signalIcon.Frame0;

        ChargeIconStates chargeState = (ChargeIconStates) Math.Clamp(Math.Ceiling(_connectedVehicle.BatteryCharge * 4f), 0, 4);
        var chargeIcon = _spriteSystem.GetState(new SpriteSpecifier.Rsi(new ResPath("/Textures/Interface/Misc/charge_icons.rsi"), chargeState.ToString()));
        ChargeIcon.Texture = chargeIcon.Frame0;
    }

    private void UpdateModuleCards()
    {
        ModuleCardsContainer.RemoveAllChildren();

        if (_vehicleModules == null)
            return;

        foreach (var module in _vehicleModules)
        {
            if (module.NeedUiCard)
            {
                var card = new RemoteModuleCardControl(module);
                card.OnUseButtonPressed += () => OnModuleUseButtonPressed?.Invoke(card.AttachedModule.Owner);

                ModuleCardsContainer.AddChild(card);
            }
        }
    }

    private void UpdateEmptyUi()
    {
        if (_spriteSystem == null)
            return;

        var signalIcon = _spriteSystem.GetState(new SpriteSpecifier.Rsi(new ResPath("/Textures/Interface/Misc/signal_icons.rsi"), SignalIconStates.none.ToString()));
        SignalIcon.Texture = signalIcon.Frame0;

        var chargeIcon = _spriteSystem.GetState(new SpriteSpecifier.Rsi(new ResPath("/Textures/Interface/Misc/charge_icons.rsi"), ChargeIconStates.none.ToString()));
        ChargeIcon.Texture = chargeIcon.Frame0;

        _staticEffect.SetParameter("noiseIntensity", 1f);
        _staticEffect.SetParameter("monoIntensity", 1f);
        CameraView.ShaderOverride = _staticEffect;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateVehicleUi();
    }

    private float EaseIn(float t, int degree)
    {
        for (int i = 0; i < degree; i++)
            t = t * t;
        return t;
    }

    private enum SignalIconStates
    {
        high = 0,
        middle = 1,
        low = 2,
        critical = 3,
        none = 4
    }

    private enum ChargeIconStates
    {
        high = 4,
        middle = 3,
        low = 2,
        critical = 1,
        none = 0
    }
}
